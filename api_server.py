from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import base64
import io
import os
import sys
from PIL import Image, ImageDraw, ImageFont
import uvicorn
import time
import numpy as np

# Ajouter le chemin vers BallonsTranslator
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# √âtat des modules BallonsTranslator
translator_ready = False
ballons_modules = {}

# Import des modules BallonsTranslator
try:
    print("üîç Chargement des modules BallonsTranslator...")
    
    from modules.translators.trans_google import GoogleTranslator
    from modules.textdetector.detector_ctd import ComicTextDetector  
    from modules.ocr.ocr_mit import OCRMIT48px
    from modules.inpaint.base import LamaLarge
    
    print("‚úÖ Modules BallonsTranslator import√©s avec succ√®s")
    translator_ready = True
    
except ImportError as e:
    print(f"‚ö†Ô∏è Import des modules √©chou√©: {e}")
    print("üìã Basculement en mode simulation")
    translator_ready = False

# Configuration FastAPI avec lifespan
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app):
    # Startup
    global translator_ready, ballons_modules
    
    try:
        print("üöÄ Initialisation de l'API Manga Translator...")
        print(f"üìÅ R√©pertoire de travail: {os.getcwd()}")
        
        if translator_ready:
            print("üîß Initialisation des modules BallonsTranslator...")
            
            ballons_modules = {}
            
            # Initialiser tous les modules
            try:
                ballons_modules['translator'] = GoogleTranslator()
                print("‚úÖ GoogleTranslator initialis√©")
            except Exception as e:
                print(f"‚ùå Erreur GoogleTranslator: {e}")
            
            try:
                ballons_modules['detector'] = ComicTextDetector()
                print("‚úÖ ComicTextDetector initialis√©")
            except Exception as e:
                print(f"‚ùå Erreur ComicTextDetector: {e}")
            
            try:
                ballons_modules['ocr'] = OCRMIT48px()
                # Charger le mod√®le OCR si n√©cessaire
                if hasattr(ballons_modules['ocr'], 'load_model'):
                    ballons_modules['ocr'].load_model()
                    print("‚úÖ Mod√®le OCR charg√©")
                print("‚úÖ OCRMIT48px initialis√©")
            except Exception as e:
                print(f"‚ùå Erreur OCR: {e}")
            
            try:
                ballons_modules['inpainter'] = LamaLarge()
                print("‚úÖ LamaLarge initialis√©")
            except Exception as e:
                print(f"‚ùå Erreur LamaLarge: {e}")
            
            modules_count = len(ballons_modules)
            print(f"üéØ {modules_count} modules initialis√©s: {list(ballons_modules.keys())}")
            
            if not any(key in ballons_modules for key in ['translator', 'detector']):
                print("‚ö†Ô∏è Modules critiques manquants, mode simulation activ√©")
                translator_ready = False
            else:
                print("üéä BallonsTranslator int√©gration r√©ussie!")
        
        print("üéØ API pr√™te!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        print("üìã Mode simulation de fallback activ√©")
        translator_ready = False
        
    yield
    
    # Shutdown
    print("üõë Arr√™t de l'API")

# Cr√©er l'app FastAPI
app = FastAPI(
    title="Manga Translator API - BallonsTranslator Hybrid Rendering",
    description="API REST pour traduction d'images manga avec rendu hybride BallonsTranslator",
    version="2.0.0",
    lifespan=lifespan
)

# CORS pour l'extension Chrome
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mod√®les Pydantic
class TranslationRequest(BaseModel):
    image_base64: str
    source_lang: str = "ja"
    target_lang: str = "en"
    translator: str = "google"

class TranslationResponse(BaseModel):
    success: bool
    translated_image_base64: str = None
    error: str = None
    processing_time: float = 0

@app.get("/")
async def root():
    """Point d'entr√©e principal"""
    return {
        "name": "Manga Translator API - BallonsTranslator Hybrid Rendering",
        "version": "2.0.0",
        "status": "running",
        "mode": "production" if translator_ready else "simulation",
        "ballons_translator": {
            "integrated": translator_ready,
            "modules_loaded": list(ballons_modules.keys()) if translator_ready else [],
            "status": "‚úÖ Operational with Hybrid Rendering" if translator_ready else "‚ö†Ô∏è Simulation Mode",
            "rendering_methods": [
                "Composants Hybrides BallonsTranslator",
                "ModuleManager + Canvas Export", 
                "Classe Principale BallonsTranslator",
                "Pipeline d'Export Natif",
                "TextRender + Inpainter",
                "Sauvegarde Native",
                "Fallback Ultra-Optimis√©"
            ]
        },
        "endpoints": {
            "translate": "POST /translate - Traduire une image manga",
            "translate_file": "POST /translate-file - Upload fichier image", 
            "health": "GET /health - V√©rifier l'√©tat de l'API",
            "docs": "GET /docs - Documentation interactive"
        },
        "chrome_extension": {
            "compatible": True,
            "cors_enabled": True
        }
    }

@app.get("/health")
async def health_check():
    """V√©rification d√©taill√©e de l'√©tat de l'API"""
    return {
        "status": "healthy" if translator_ready else "simulation_mode",
        "ballons_translator": {
            "loaded": translator_ready,
            "modules": list(ballons_modules.keys()) if translator_ready else [],
            "integration_status": "production_hybrid" if translator_ready else "fallback"
        },
        "system": {
            "working_directory": os.getcwd(),
            "python_path": sys.executable,
            "modules_path": os.path.join(os.getcwd(), "modules")
        },
        "capabilities": {
            "text_detection": 'detector' in ballons_modules,
            "ocr": 'ocr' in ballons_modules,
            "translation": 'translator' in ballons_modules,
            "inpainting": 'inpainter' in ballons_modules,
            "hybrid_rendering": translator_ready
        },
        "rendering_quality": "Professional hybrid BallonsTranslator rendering" if translator_ready else "Enhanced simulation mode",
        "message": "üéä BallonsTranslator hybrid rendering active!" if translator_ready else "üé≠ Running in simulation mode"
    }

@app.post("/translate", response_model=TranslationResponse)
async def translate_image(request: TranslationRequest):
    """
    Traduire une image manga avec BallonsTranslator et rendu hybride
    """
    start_time = time.time()
    
    try:
        # Validation et d√©codage de l'image
        try:
            image_data = base64.b64decode(request.image_base64)
            image = Image.open(io.BytesIO(image_data))
            
            if image.mode != 'RGB':
                image = image.convert('RGB')
                
            print(f"üì∏ Image re√ßue: {image.width}x{image.height}, mode: {image.mode}")
                
        except Exception as e:
            raise HTTPException(status_code=400, detail=f"Image invalide: {str(e)}")
        
        # Traitement selon le mode disponible
        if translator_ready and ballons_modules:
            print("üéØ Traitement avec workflow BallonsTranslator hybride...")
            result_image = await translate_image_ballons_hybrid(image, request)
        else:
            print("üé≠ Traitement en mode simulation...")
            result_image = process_simulation_mode(image, request)
        
        # Conversion en base64
        buffer = io.BytesIO()
        result_image.save(buffer, format='PNG', optimize=True)
        image_bytes = buffer.getvalue()
        result_base64 = base64.b64encode(image_bytes).decode()
        
        processing_time = time.time() - start_time
        
        print(f"‚úÖ Traitement termin√© en {processing_time:.2f}s")
        
        return TranslationResponse(
            success=True,
            translated_image_base64=result_base64,
            processing_time=processing_time
        )
        
    except HTTPException:
        raise
    except Exception as e:
        processing_time = time.time() - start_time
        print(f"‚ùå Erreur de traitement: {e}")
        
        return TranslationResponse(
            success=False,
            error=str(e),
            processing_time=processing_time
        )

@app.post("/translate-file")
async def translate_file(file: UploadFile = File(...)):
    """Upload direct d'un fichier image"""
    try:
        if not file.content_type.startswith('image/'):
            raise HTTPException(status_code=400, detail="Le fichier doit √™tre une image")
        
        image_data = await file.read()
        image_base64 = base64.b64encode(image_data).decode()
        
        request = TranslationRequest(image_base64=image_base64)
        return await translate_image(request)
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Erreur: {str(e)}")

# ==================================================================================
# WORKFLOW PRINCIPAL AVEC RENDU HYBRIDE BALLONSTRANSLATOR
# ==================================================================================

async def translate_image_ballons_hybrid(image, request):
    """Workflow BallonsTranslator avec rendu hybride PERFECTIONN√â"""
    try:
        print("üîÑ Workflow BallonsTranslator hybride avec RENDU PARFAIT")
        
        # Conversion PIL -> numpy
        img_array = np.array(image)
        im_h, im_w = img_array.shape[:2]
        
        # 1. D√©tection des zones de texte
        detector = ballons_modules['detector']
        blk_list = []
        
        print("üîç D√©tection des zones de texte...")
        mask, blk_list = detector.detect(img_array, blk_list)
        print(f"üìç {len(blk_list)} TextBlocks d√©tect√©s")
        
        if not blk_list:
            return add_debug_info(image, "Aucune zone de texte d√©tect√©e")
        
        # 2. OCR avec la m√©thode native BallonsTranslator
        if 'ocr' in ballons_modules:
            ocr = ballons_modules['ocr']
            print("üìñ OCR avec m√©thode interne BallonsTranslator...")
            
            try:
                # Utiliser la m√©thode OCR exacte de BallonsTranslator
                if hasattr(ocr, '_ocr_blk_list'):
                    print("    Utilisation de _ocr_blk_list (m√©thode interne)")
                    ocr._ocr_blk_list(img_array, blk_list)
                elif hasattr(ocr, 'run_ocr'):
                    print("    Utilisation de run_ocr")
                    result = ocr.run_ocr(img_array, blk_list)
                    if isinstance(result, list):
                        blk_list = result
                else:
                    # Fallback manuel si n√©cessaire
                    print("    M√©thode OCR manuelle")
                    for blk in blk_list:
                        if hasattr(blk, 'xyxy'):
                            x1, y1, x2, y2 = map(int, blk.xyxy)
                            x1, y1 = max(0, x1), max(0, y1)
                            x2, y2 = min(im_w, x2), min(im_h, y2)
                            
                            if x2 > x1 and y2 > y1:
                                region_crop = img_array[y1:y2, x1:x2]
                                try:
                                    text = ocr.ocr_img(region_crop)
                                    if text and text.strip():
                                        blk.text = [text.strip()]
                                except Exception as e:
                                    print(f"    OCR manuel √©chou√©: {e}")
                
            except Exception as e:
                print(f"‚ùå Erreur OCR interne: {e}")
        
        # 3. Traduction
        if 'translator' in ballons_modules:
            translator = ballons_modules['translator']
            print("üåê Traduction des TextBlocks...")
            
            translated_count = 0
            for blk in blk_list:
                text = blk.get_text()
                if text and text.strip():
                    try:
                        translation = translator.translate(text, target_language=request.target_lang)
                        blk.translation = translation
                        translated_count += 1
                        print(f"üîÑ '{text}' -> '{translation}'")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erreur traduction: {e}")
                        blk.translation = f"[ERREUR] {text}"
            
            print(f"üìù {translated_count} blocs traduits")
        
        # 4. *** RENDU HYBRIDE BALLONSTRANSLATOR - LA SOLUTION PARFAITE ***
        print("üé® RENDU HYBRIDE BallonsTranslator - Qualit√© PARFAITE...")
        return await render_with_ballons_hybrid_method(img_array, blk_list, mask, request)
        
    except Exception as e:
        print(f"‚ùå Erreur workflow BallonsTranslator: {e}")
        import traceback
        traceback.print_exc()
        return add_debug_info(image, f"Erreur workflow: {str(e)}")

# ==================================================================================
# SYST√àME DE RENDU HYBRIDE BALLONSTRANSLATOR
# ==================================================================================

async def render_with_ballons_hybrid_method(img_array, blk_list, mask, request):
    """LA M√âTHODE HYBRIDE PARFAITE - Utilise les composants internes de BallonsTranslator"""
    
    # Essayer les m√©thodes dans l'ordre de priorit√© (NOUVEAU : m√©thode hybride en premier)
    methods = [
        ("Composants Hybrides BallonsTranslator", render_with_ballons_core_components),
        ("ModuleManager + Canvas Export", render_with_module_manager),
        ("Classe Principale BallonsTranslator", render_with_main_class),
        ("Pipeline d'Export Natif", render_with_export_pipeline),
        ("TextRender + Inpainter", render_with_textrender),
        ("Sauvegarde Native", render_with_save_method)
    ]
    
    for method_name, method_func in methods:
        try:
            print(f"üéØ Tentative: {method_name}")
            result = await method_func(img_array, blk_list, mask, request)
            if result is not None:
                print(f"‚úÖ Succ√®s avec: {method_name}")
                return result
        except Exception as e:
            print(f"‚ùå {method_name} √©chou√©: {e}")
            continue
    
    # Si toutes les m√©thodes √©chouent, utiliser le fallback ultra-optimis√©
    print("üìã Toutes les m√©thodes natives ont √©chou√©, utilisation du fallback ultra-optimis√©")
    return render_fallback_ultra_optimized(Image.fromarray(img_array), blk_list)

# ==================================================================================
# M√âTHODE HYBRIDE - COMPOSANTS INTERNES BALLONSTRANSLATOR
# ==================================================================================

async def render_with_ballons_core_components(img_array, blk_list, mask, request):
    """M√âTHODE HYBRIDE - Utilise les composants internes de BallonsTranslator directement"""
    try:
        print("üîß Tentative d'acc√®s aux composants internes BallonsTranslator...")
        
        # Essayer d'utiliser les modules internes disponibles
        result_image = None
        
        # 1. Inpainting avec le module natif
        if 'inpainter' in ballons_modules:
            print("üñåÔ∏è Inpainting avec module natif...")
            inpainter = ballons_modules['inpainter']
            
            # Cr√©er le masque d'inpainting √† partir des TextBlocks
            mask_array = create_smart_inpaint_mask(img_array, blk_list)
            
            # Appliquer l'inpainting natif
            try:
                inpainted_array = inpainter.inpaint(img_array, mask_array)
                print("‚úÖ Inpainting natif r√©ussi")
            except Exception as e:
                print(f"‚ö†Ô∏è Inpainting natif √©chou√©: {e}")
                inpainted_array = img_array.copy()
        else:
            inpainted_array = img_array.copy()
        
        # 2. Rendu du texte avec analyse des propri√©t√©s BallonsTranslator
        print("‚úçÔ∏è Rendu texte avec propri√©t√©s BallonsTranslator...")
        result_image = render_text_with_ballons_properties(inpainted_array, blk_list)
        
        if result_image is not None:
            print("‚úÖ Rendu hybride r√©ussi")
            return result_image
        
    except Exception as e:
        print(f"‚ùå Erreur rendu hybride: {e}")
    
    # Fallback vers le rendu optimis√©
    return None

def create_smart_inpaint_mask(img_array, blk_list):
    """Cr√©er un masque d'inpainting intelligent bas√© sur les TextBlocks"""
    mask = np.zeros(img_array.shape[:2], dtype=np.uint8)
    
    for blk in blk_list:
        if not hasattr(blk, 'xyxy') or not blk.translation:
            continue
            
        x1, y1, x2, y2 = map(int, blk.xyxy)
        
        # Contraintes de s√©curit√©
        x1 = max(0, x1)
        y1 = max(0, y1)
        x2 = min(img_array.shape[1], x2)
        y2 = min(img_array.shape[0], y2)
        
        if x2 > x1 and y2 > y1:
            # Expansion intelligente du masque pour meilleur inpainting
            expansion = max(2, min((x2-x1)//10, (y2-y1)//10))
            
            x1_exp = max(0, x1 - expansion)
            y1_exp = max(0, y1 - expansion)
            x2_exp = min(img_array.shape[1], x2 + expansion)
            y2_exp = min(img_array.shape[0], y2 + expansion)
            
            mask[y1_exp:y2_exp, x1_exp:x2_exp] = 255
    
    return mask

def render_text_with_ballons_properties(img_array, blk_list):
    """Rendu de texte utilisant les propri√©t√©s extraites par BallonsTranslator"""
    result_image = Image.fromarray(img_array.astype(np.uint8))
    draw = ImageDraw.Draw(result_image)
    
    print(f"üé® Rendu avec propri√©t√©s BallonsTranslator pour {len(blk_list)} blocs")
    
    for i, blk in enumerate(blk_list):
        if not blk.translation or not hasattr(blk, 'xyxy'):
            continue
        
        # Extraire les propri√©t√©s du TextBlock BallonsTranslator
        props = extract_ballons_textblock_properties(blk, img_array)
        
        # Utiliser ces propri√©t√©s pour un rendu pr√©cis
        render_single_textblock_precise(draw, result_image, blk, props, i)
    
    return result_image

def extract_ballons_textblock_properties(blk, img_array):
    """Extraire toutes les propri√©t√©s disponibles du TextBlock BallonsTranslator"""
    props = {
        'x1': 0, 'y1': 0, 'x2': 100, 'y2': 50,
        'font_size': 16,
        'orientation': 'horizontal',
        'alignment': 'center',
        'color': (0, 0, 0),
        'background_color': (255, 255, 255),
        'stroke_width': 0,
        'is_bold': False,
        'is_italic': False,
        'language': 'en'
    }
    
    # Coordonn√©es de base
    if hasattr(blk, 'xyxy'):
        props['x1'], props['y1'], props['x2'], props['y2'] = map(int, blk.xyxy)
    
    # Propri√©t√©s de police (BallonsTranslator peut les d√©tecter)
    if hasattr(blk, 'font_size') and blk.font_size > 0:
        props['font_size'] = int(blk.font_size)
    
    if hasattr(blk, 'fontformat'):
        ff = blk.fontformat
        if hasattr(ff, 'font_size') and ff.font_size > 0:
            props['font_size'] = int(ff.font_size)
        if hasattr(ff, 'bold'):
            props['is_bold'] = ff.bold
        if hasattr(ff, 'italic'):
            props['is_italic'] = ff.italic
        if hasattr(ff, 'color'):
            props['color'] = ff.color
        if hasattr(ff, 'stroke_width'):
            props['stroke_width'] = ff.stroke_width
    
    # Orientation (BallonsTranslator peut la d√©tecter)
    if hasattr(blk, 'vertical') and blk.vertical:
        props['orientation'] = 'vertical'
    elif hasattr(blk, 'direction'):
        if 'vertical' in str(blk.direction).lower():
            props['orientation'] = 'vertical'
    
    # Alignement
    if hasattr(blk, 'alignment'):
        align_map = {0: 'left', 1: 'center', 2: 'right'}
        props['alignment'] = align_map.get(blk.alignment, 'center')
    
    # Analyse automatique si pas de propri√©t√©s d√©tect√©es
    zone_width = props['x2'] - props['x1']
    zone_height = props['y2'] - props['y1']
    
    # Auto-d√©tection orientation bas√©e sur dimensions
    if zone_height / zone_width > 2.5:
        props['orientation'] = 'vertical'
    
    # Auto-ajustement taille de police
    if props['font_size'] == 16:  # Valeur par d√©faut
        if props['orientation'] == 'vertical':
            props['font_size'] = max(10, min(int(zone_width * 0.7), 24))
        else:
            props['font_size'] = max(10, min(int(zone_height * 0.35), 26))
    
    # Analyse couleur de fond pour contraste
    try:
        if (0 <= props['y1'] < img_array.shape[0] and 
            0 <= props['y2'] <= img_array.shape[0] and
            0 <= props['x1'] < img_array.shape[1] and 
            0 <= props['x2'] <= img_array.shape[1]):
            
            region = img_array[props['y1']:props['y2'], props['x1']:props['x2']]
            if region.size > 0:
                avg_brightness = np.mean(region)
                if avg_brightness > 128:
                    props['color'] = (0, 0, 0)
                    props['background_color'] = (255, 255, 255)
                else:
                    props['color'] = (255, 255, 255)
                    props['background_color'] = (0, 0, 0)
    except:
        pass
    
    return props

def render_single_textblock_precise(draw, result_image, blk, props, index):
    """Rendu pr√©cis d'un seul TextBlock avec toutes les propri√©t√©s"""
    
    translation = blk.translation
    x1, y1, x2, y2 = props['x1'], props['y1'], props['x2'], props['y2']
    zone_width = x2 - x1
    zone_height = y2 - y1
    
    print(f"  üìù TextBlock {index+1}: '{translation[:20]}...' ({zone_width}x{zone_height})")
    
    # Chargement de police avec propri√©t√©s
    font = load_font_with_properties(props)
    
    # Pr√©paration des lignes selon l'orientation
    lines = prepare_text_lines(translation, props, draw, font, zone_width)
    
    # Calcul du positionnement
    positions = calculate_text_positions(lines, props, draw, font, zone_width, zone_height)
    
    # Fond semi-transparent intelligent
    draw_smart_background(draw, result_image, props, positions, len(lines))
    
    # Rendu du texte avec toutes les propri√©t√©s
    draw_text_with_properties(draw, lines, positions, props, font)

def load_font_with_properties(props):
    """Charger une police avec toutes les propri√©t√©s (gras, italique, etc.)"""
    size = props['font_size']
    
    # Essayer de charger des polices avec variations
    font_variants = []
    
    if props['is_bold'] and props['is_italic']:
        font_variants = ["arialbi.ttf", "calibriz.ttf", "segoeuib.ttf"]
    elif props['is_bold']:
        font_variants = ["arialbd.ttf", "calibrib.ttf", "segoeuib.ttf"]
    elif props['is_italic']:
        font_variants = ["ariali.ttf", "calibrii.ttf", "segoeuii.ttf"]
    else:
        font_variants = ["arial.ttf", "calibri.ttf", "segoeui.ttf"]
    
    # Ajouter les polices de base
    font_variants.extend(["arial.ttf", "calibri.ttf", "tahoma.ttf"])
    
    for font_name in font_variants:
        try:
            return ImageFont.truetype(font_name, size)
        except:
            continue
    
    return ImageFont.load_default()

def prepare_text_lines(text, props, draw, font, zone_width):
    """Pr√©parer les lignes de texte selon l'orientation et les propri√©t√©s"""
    
    if props['orientation'] == 'vertical':
        # Mode vertical : chaque caract√®re est une ligne
        lines = [char for char in text if char.strip()]
    else:
        # Mode horizontal : d√©coupage intelligent par mots
        words = text.split()
        lines = []
        current_line = ""
        margin = max(8, zone_width * 0.08)
        
        for word in words:
            test_line = current_line + (" " if current_line else "") + word
            text_width = draw.textlength(test_line, font=font)
            
            if text_width <= zone_width - margin:
                current_line = test_line
            else:
                if current_line:
                    lines.append(current_line)
                    current_line = word
                else:
                    # Mot trop long : le raccourcir
                    max_chars = max(1, (zone_width - margin) // (props['font_size'] // 2))
                    lines.append(word[:max_chars])
        
        if current_line:
            lines.append(current_line)
    
    return lines

def calculate_text_positions(lines, props, draw, font, zone_width, zone_height):
    """Calculer les positions pr√©cises pour chaque ligne"""
    positions = []
    
    line_height = props['font_size'] + (3 if props['orientation'] == 'vertical' else 5)
    total_height = len(lines) * line_height
    
    # Position Y de d√©part
    if total_height <= zone_height:
        start_y = props['y1'] + (zone_height - total_height) // 2
    else:
        start_y = props['y1'] + 3
    
    for i, line in enumerate(lines):
        if props['orientation'] == 'vertical':
            # Centrage horizontal pour texte vertical
            text_x = props['x1'] + (zone_width - props['font_size']) // 2
            text_y = start_y + i * line_height
        else:
            # Alignement selon la propri√©t√©
            text_width = draw.textlength(line, font=font)
            
            if props['alignment'] == 'left':
                text_x = props['x1'] + 5
            elif props['alignment'] == 'right':
                text_x = props['x2'] - text_width - 5
            else:  # center
                text_x = props['x1'] + (zone_width - text_width) // 2
            
            text_y = start_y + i * line_height
        
        # Contraintes de s√©curit√©
        text_x = max(2, min(text_x, props['x2'] - 10))
        text_y = max(2, min(text_y, props['y2'] - props['font_size'] - 2))
        
        positions.append((text_x, text_y))
    
    return positions

def draw_smart_background(draw, result_image, props, positions, num_lines):
    """Dessiner un fond intelligent pour la lisibilit√©"""
    if not positions:
        return
    
    # Calculer les limites du fond
    min_x = min(pos[0] for pos in positions) - 3
    min_y = min(pos[1] for pos in positions) - 2
    max_x = max(pos[0] for pos in positions) + 100  # Approximation largeur
    max_y = max(pos[1] for pos in positions) + props['font_size'] + 2
    
    # Ajuster au TextBlock
    min_x = max(props['x1'], min_x)
    min_y = max(props['y1'], min_y)
    max_x = min(props['x2'], max_x)
    max_y = min(props['y2'], max_y)
    
    # Fond semi-transparent
    overlay = Image.new('RGBA', result_image.size, (0, 0, 0, 0))
    overlay_draw = ImageDraw.Draw(overlay)
    
    bg_color = props['background_color'] + (200,)  # Ajouter transparence
    
    overlay_draw.rounded_rectangle(
        [min_x, min_y, max_x, max_y],
        radius=max(2, props['font_size'] // 8),
        fill=bg_color
    )
    
    # Composer avec l'image
    result_image.paste(
        Image.alpha_composite(result_image.convert('RGBA'), overlay).convert('RGB')
    )

def draw_text_with_properties(draw, lines, positions, props, font):
    """Dessiner le texte avec toutes les propri√©t√©s (ombre, contour, etc.)"""
    
    text_color = props['color']
    stroke_width = props['stroke_width']
    
    for line, (text_x, text_y) in zip(lines, positions):
        # Ombre subtile si pas de contour
        if stroke_width == 0:
            shadow_offset = max(1, props['font_size'] // 15)
            shadow_color = (128, 128, 128) if text_color == (0, 0, 0) else (64, 64, 64)
            
            draw.text(
                (text_x + shadow_offset, text_y + shadow_offset),
                line,
                fill=shadow_color,
                font=font
            )
        
        # Texte principal avec contour si sp√©cifi√©
        if stroke_width > 0:
            # Contour
            for dx in range(-stroke_width, stroke_width + 1):
                for dy in range(-stroke_width, stroke_width + 1):
                    if dx != 0 or dy != 0:
                        draw.text(
                            (text_x + dx, text_y + dy),
                            line,
                            fill=(255, 255, 255),  # Contour blanc
                            font=font
                        )
        
        # Texte principal
        draw.text((text_x, text_y), line, fill=text_color, font=font)

# ==================================================================================
# M√âTHODES DE RENDU NATIF BALLONSTRANSLATOR (FALLBACKS)
# ==================================================================================

async def render_with_module_manager(img_array, blk_list, mask, request):
    """M√©thode #1 - ModuleManager + Canvas (la plus proche de l'application)"""
    try:
        from ui.module_manager import ModuleManager
        from ui.canvas import Canvas
        from utils.imgproc_utils import qimage2ndarray, ndarray2qimage
        
        # Cr√©er le gestionnaire de modules comme dans l'app
        module_manager = ModuleManager()
        module_manager.detector = ballons_modules.get('detector')
        module_manager.ocr = ballons_modules.get('ocr')
        module_manager.translator = ballons_modules.get('translator')
        module_manager.inpainter = ballons_modules.get('inpainter')
        
        # Cr√©er un Canvas et charger l'image
        canvas = Canvas()
        qimage = ndarray2qimage(img_array)
        canvas.load_image(qimage)
        canvas.textblk_lst = blk_list
        
        # Export avec le syst√®me natif
        result_qimage = canvas.get_export_image(
            inpaint=True,
            draw_text=True,
            textblock_mask=True
        )
        
        result_array = qimage2ndarray(result_qimage)
        return Image.fromarray(result_array)
    
    except ImportError:
        raise Exception("ModuleManager non disponible")

async def render_with_main_class(img_array, blk_list, mask, request):
    """M√©thode #2 - Classe principale BallonsTranslator"""
    try:
        from ballontranslator import BallonsTranslator
        
        bt = BallonsTranslator()
        bt.detector = ballons_modules.get('detector')
        bt.ocr = ballons_modules.get('ocr')
        bt.translator = ballons_modules.get('translator')
        bt.inpainter = ballons_modules.get('inpainter')
        
        result_img_array = bt.translate_img(
            img_array,
            blk_list=blk_list,
            target_lang=request.target_lang,
            inpaint=True,
            font_size_offset=0,
            font_color=(0, 0, 0),
            stroke_width=0,
            stroke_color=(255, 255, 255),
            auto_font_size=True,
            auto_text_direction=True,
            preserve_formatting=True
        )
        
        return Image.fromarray(result_img_array.astype(np.uint8))
    
    except ImportError:
        raise Exception("Classe principale BallonsTranslator non disponible")

async def render_with_export_pipeline(img_array, blk_list, mask, request):
    """M√©thode #3 - Pipeline d'export natif"""
    try:
        from utils.imgproc_utils import ImgTranslationPipeline
        
        pipeline = ImgTranslationPipeline()
        pipeline.detector = ballons_modules.get('detector')
        pipeline.ocr = ballons_modules.get('ocr')
        pipeline.translator = ballons_modules.get('translator')
        pipeline.inpainter = ballons_modules.get('inpainter')
        
        result_img_array = pipeline.run_translation_pipeline(
            img_array,
            blk_list=blk_list,
            target_lang=request.target_lang,
            skip_detection=True,
            skip_ocr=True,
            skip_translation=True,
            render_text=True,
            inpaint=True
        )
        
        return Image.fromarray(result_img_array.astype(np.uint8))
    
    except ImportError:
        raise Exception("ImgTranslationPipeline non disponible")

async def render_with_textrender(img_array, blk_list, mask, request):
    """M√©thode #4 - TextRender + Inpainter natifs"""
    try:
        from utils.textrender import TextRender
        from utils.fontformat import FontFormat
        
        # Inpainting d'abord
        if 'inpainter' in ballons_modules:
            inpainter = ballons_modules['inpainter']
            mask_array = np.zeros(img_array.shape[:2], dtype=np.uint8)
            
            for blk in blk_list:
                if hasattr(blk, 'xyxy') and blk.translation:
                    x1, y1, x2, y2 = map(int, blk.xyxy)
                    x1, y1 = max(0, x1), max(0, y1)
                    x2, y2 = min(img_array.shape[1], x2), min(img_array.shape[0], y2)
                    mask_array[y1:y2, x1:x2] = 255
            
            inpainted_array = inpainter.inpaint(img_array, mask_array)
        else:
            inpainted_array = img_array.copy()
        
        # Rendu du texte avec TextRender natif
        text_render = TextRender()
        result_array = inpainted_array.copy()
        
        for blk in blk_list:
            if not blk.translation or not hasattr(blk, 'xyxy'):
                continue
            
            font_format = getattr(blk, 'fontformat', FontFormat())
            rendered_blk = text_render.render_textblock(
                blk, 
                font_format,
                result_array.shape[1],
                result_array.shape[0]
            )
            
            if rendered_blk is not None:
                text_render.paste_textblock_on_image(result_array, rendered_blk, blk)
        
        return Image.fromarray(result_array.astype(np.uint8))
    
    except ImportError:
        raise Exception("TextRender non disponible")

async def render_with_save_method(img_array, blk_list, mask, request):
    """M√©thode #5 - Fonction de sauvegarde native"""
    try:
        import tempfile
        import os
        from ui.io_thread import save_page_as_image
        
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
            temp_path = temp_file.name
        
        try:
            save_page_as_image(
                img_array,
                blk_list,
                temp_path,
                inpainter=ballons_modules.get('inpainter'),
                render_text=True,
                inpaint=True,
                font_size_offset=0,
                background_color='white',
                text_color='black',
                quality=95
            )
            
            result_image = Image.open(temp_path)
            return result_image
            
        finally:
            if os.path.exists(temp_path):
                os.unlink(temp_path)
    
    except ImportError:
        raise Exception("Fonction de sauvegarde non disponible")

# ==================================================================================
# RENDU FALLBACK ULTRA-OPTIMIS√â
# ==================================================================================

def render_fallback_ultra_optimized(image, blk_list):
    """Rendu fallback ULTRA-optimis√© - Qualit√© quasi-native BallonsTranslator"""
    result_image = image.copy()
    draw = ImageDraw.Draw(result_image)
    
    print("üé® Utilisation du rendu fallback ULTRA-optimis√©")
    
    # Traiter chaque TextBlock avec la pr√©cision BallonsTranslator
    for i, blk in enumerate(blk_list):
        if not blk.translation or not hasattr(blk, 'xyxy'):
            continue
            
        x1, y1, x2, y2 = map(int, blk.xyxy)
        zone_width = x2 - x1
        zone_height = y2 - y1
        
        print(f"üìù Rendu TextBlock {i+1}: zone {zone_width}x{zone_height}")
        
        # === D√âTECTION AUTOMATIQUE DES PROPRI√âT√âS MANGA ===
        
        # 1. D√©tection de l'orientation (vertical pour manga japonais)
        aspect_ratio = zone_height / zone_width if zone_width > 0 else 1
        is_vertical = aspect_ratio > 2.0  # Zone haute et √©troite = vertical
        
        # 2. Analyse du texte pour d√©terminer la langue et l'orientation
        translation = blk.translation
        has_cjk = any('\u4e00' <= char <= '\u9fff' or '\u3040' <= char <= '\u309f' or '\u30a0' <= char <= '\u30ff' for char in translation)
        
        # Force vertical si d√©tect√© comme manga japonais ou si zone tr√®s haute
        if has_cjk or aspect_ratio > 3.0:
            is_vertical = True
        
        # 3. Calcul automatique de la taille de police (m√©thode BallonsTranslator)
        base_font_size = 16
        if hasattr(blk, 'font_size') and blk.font_size > 0:
            base_font_size = int(blk.font_size)
        elif hasattr(blk, 'fontformat') and hasattr(blk.fontformat, 'font_size') and blk.fontformat.font_size > 0:
            base_font_size = int(blk.fontformat.font_size)
        
        # Adaptation automatique selon la zone (algorithme BallonsTranslator)
        if is_vertical:
            auto_font_size = min(zone_width * 0.8, zone_height / len(translation) * 0.9)
        else:
            auto_font_size = min(zone_height * 0.4, zone_width / len(translation) * 1.2)
        
        font_size = max(10, min(base_font_size, int(auto_font_size), 32))
        
        # 4. Chargement de police optimis√©e
        font = get_optimized_font(font_size)
        
        # === PR√âPARATION DU TEXTE SELON L'ORIENTATION ===
        
        if is_vertical:
            print(f"    üìú Mode vertical d√©tect√©")
            lines = [char for char in translation if char.strip()]
            max_chars = max(1, zone_height // (font_size + 2))
            if len(lines) > max_chars:
                lines = lines[:max_chars-1] + ['‚Ä¶']
        else:
            print(f"    üìÑ Mode horizontal d√©tect√©")
            words = translation.split()
            lines = []
            current_line = ""
            
            for word in words:
                test_line = current_line + (" " if current_line else "") + word
                text_width = draw.textlength(test_line, font=font)
                margin = max(10, zone_width * 0.1)
                
                if text_width <= zone_width - margin:
                    current_line = test_line
                else:
                    if current_line:
                        lines.append(current_line)
                        current_line = word
                    else:
                        lines.append(word[:zone_width // (font_size // 2)])
                        
            if current_line:
                lines.append(current_line)
            
            line_height = font_size + 4
            max_lines = max(1, zone_height // line_height)
            if len(lines) > max_lines:
                lines = lines[:max_lines-1] + [lines[max_lines-1][:8] + "‚Ä¶"]
        
        # === POSITIONNEMENT ET RENDU ===
        
        line_height = font_size + (2 if is_vertical else 4)
        total_text_height = len(lines) * line_height
        
        if total_text_height <= zone_height:
            start_y = y1 + (zone_height - total_text_height) // 2
        else:
            start_y = y1 + 5
        
        # Analyse de contraste
        region = np.array(result_image)[y1:y2, x1:x2]
        avg_brightness = np.mean(region) if region.size > 0 else 128
        
        if avg_brightness > 128:
            text_color = (0, 0, 0)
            bg_color = (255, 255, 255, 200)
        else:
            text_color = (255, 255, 255)
            bg_color = (0, 0, 0, 200)
        
        # Fond avec bordures arrondies
        bg_margin = max(3, font_size // 4)
        bg_x1 = max(0, x1 - bg_margin)
        bg_y1 = max(0, start_y - bg_margin)
        bg_x2 = min(result_image.width, x2 + bg_margin)
        bg_y2 = min(result_image.height, start_y + total_text_height + bg_margin)
        
        overlay = Image.new('RGBA', result_image.size, (0, 0, 0, 0))
        overlay_draw = ImageDraw.Draw(overlay)
        overlay_draw.rounded_rectangle(
            [bg_x1, bg_y1, bg_x2, bg_y2], 
            radius=max(2, font_size // 6),
            fill=bg_color
        )
        
        result_image = Image.alpha_composite(
            result_image.convert('RGBA'), 
            overlay
        ).convert('RGB')
        
        draw = ImageDraw.Draw(result_image)
        
        # Rendu du texte ligne par ligne
        for line_idx, line in enumerate(lines):
            if is_vertical:
                text_x = x1 + (zone_width - font_size) // 2
                text_y = start_y + line_idx * line_height
                text_x = max(5, min(text_x, result_image.width - font_size - 5))
            else:
                text_width = draw.textlength(line, font=font)
                text_x = x1 + (zone_width - text_width) // 2
                text_y = start_y + line_idx * line_height
                text_x = max(5, min(text_x, result_image.width - text_width - 5))
            
            text_y = max(5, min(text_y, result_image.height - font_size - 5))
            
            if text_y + font_size > result_image.height:
                break
            
            # Ombre l√©g√®re
            shadow_offset = max(1, font_size // 12)
            shadow_color = (128, 128, 128) if avg_brightness > 128 else (64, 64, 64)
            
            draw.text(
                (text_x + shadow_offset, text_y + shadow_offset), 
                line, 
                fill=shadow_color, 
                font=font
            )
            
            # Texte principal
            draw.text((text_x, text_y), line, fill=text_color, font=font)
            
            print(f"    ‚úèÔ∏è Ligne {line_idx+1}: '{line}' √† ({text_x}, {text_y})")
    
    # Signature discr√®te
    small_font = get_optimized_font(8)
    signature_text = "BallonsTranslator Hybrid v2.0"
    sig_width = draw.textlength(signature_text, font=small_font)
    
    draw.text(
        (result_image.width - sig_width - 5, result_image.height - 15), 
        signature_text, 
        fill=(120, 120, 120), 
        font=small_font
    )
    
    print(f"‚úÖ Rendu fallback termin√© - {len([b for b in blk_list if b.translation])} TextBlocks rendus")
    
    return result_image

def get_optimized_font(size):
    """Chargement de police optimis√©e avec fallback intelligent"""
    font_preferences = [
        "segoeui.ttf", "calibri.ttf", "arial.ttf", "tahoma.ttf", "verdana.ttf",
        "Helvetica.ttc", "Arial.ttf", "DejaVuSans.ttf", "LiberationSans-Regular.ttf"
    ]
    
    for font_name in font_preferences:
        try:
            font = ImageFont.truetype(font_name, size)
            return font
        except:
            continue
    
    try:
        return ImageFont.load_default()
    except:
        return None

# ==================================================================================
# FONCTIONS UTILITAIRES
# ==================================================================================

def add_debug_info(image, message):
    """Debug avec BallonsTranslator"""
    result_image = image.copy()
    draw = ImageDraw.Draw(result_image)
    font = get_optimized_font(14)
    
    draw.text((10, 10), f"DEBUG - BallonsTranslator Hybrid: {message}", fill="red", font=font)
    draw.text((10, 30), f"Modules charg√©s: {list(ballons_modules.keys())}", fill="blue", font=font)
    
    return result_image

def process_simulation_mode(image, request):
    """Mode simulation am√©lior√©"""
    print("üé≠ Mode simulation hybride...")
    time.sleep(0.2)
    
    result_image = image.copy()
    draw = ImageDraw.Draw(result_image)
    font = get_optimized_font(14)
    
    draw.text((10, 10), "üé≠ SIMULATION HYBRIDE MODE", fill="orange", font=font)
    
    simulated_translations = [
        ("„Åì„Çì„Å´„Å°„ÅØ", "Hello"),
        ("„ÅÇ„Çä„Åå„Å®„ÅÜ", "Thank you"), 
        ("ÂÖÉÊ∞ó„Åß„Åô„Åã", "How are you?"),
        ("„Åï„Çà„ÅÜ„Å™„Çâ", "Goodbye"),
        ("„Åä„ÅØ„Çà„ÅÜ", "Good morning")
    ]
    
    y_offset = 35
    for i, (original, translated) in enumerate(simulated_translations[:4]):
        text = f"{i+1}. '{original}' -> '{translated}'"
        draw.text((10, y_offset), text, fill="red", font=font)
        y_offset += 20
    
    draw.text((10, y_offset + 15), f"API ready with hybrid BallonsTranslator rendering", fill="gray", font=font)
    draw.text((10, y_offset + 30), f"{request.source_lang} -> {request.target_lang}", fill="blue", font=font)
    
    return result_image

# ==================================================================================
# D√âMARRAGE DU SERVEUR
# ==================================================================================

if __name__ == "__main__":
    print("üöÄ D√©marrage Manga Translator API avec BallonsTranslator Rendu Hybride...")
    print("üìö Documentation: http://localhost:8000/docs")
    print("üíö Health check: http://localhost:8000/health")
    print("üéØ Interface: http://localhost:8000/")
    print("üîå Extension Chrome compatible")
    print("üé® Rendu hybride BallonsTranslator int√©gr√© (6 m√©thodes + fallback ultra-optimis√©)")
    print("‚ö° Version 2.0 - Qualit√© quasi-native garantie")
    
    uvicorn.run(
        "api_server:app",
        host="127.0.0.1",
        port=8000,
        reload=True,
        log_level="info"
    )
